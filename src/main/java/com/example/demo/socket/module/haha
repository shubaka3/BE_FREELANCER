//package com.example.demo.socket.module;
//
//import com.corundumstudio.socketio.SocketIOServer;
//import com.corundumstudio.socketio.listener.ConnectListener;
//import com.corundumstudio.socketio.listener.DataListener;
//import com.corundumstudio.socketio.listener.DisconnectListener;
//import com.example.demo.socket.message.Message;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.stereotype.Component;
//@Slf4j
//@Component
//public class SocketModule {
//    private final SocketIOServer server;
//    private final SocketService socketService;
//
//    public SocketModule(SocketIOServer server, SocketService socketService) {
//        this.server = server;
//        this.socketService = socketService;
//
//        // Add event listener for room switching
//        server.addEventListener("switch_room", String.class, onRoomSwitch());
//
////        server.addConnectListener(onConnected());
////        server.addDisconnectListener(onDisconnected());
////        server.addEventListener("send_message", Message.class, onChatReceived());
//        // Event listeners for call signals
//
//
//        server.addConnectListener(onConnected());
//        server.addDisconnectListener(onDisconnected());
//        server.addEventListener("send_message", Message.class, onChatReceived());
//    }
//
//    private DataListener<String> onRoomSwitch() {
//        return (client, newRoom, ackSender) -> {
//            // Leave all previous rooms except the default session room
//            client.getAllRooms().stream()
//                    .filter(room -> !room.equals(client.getSessionId().toString()))
//                    .forEach(client::leaveRoom);
//
//            // Join the new room
//            client.joinRoom(newRoom);
//            log.info("Client [{}] switched to room [{}]", client.getSessionId(), newRoom);
//        };
//    }
//
//    private DataListener<Message> onChatReceived() {
//        return (senderClient, data, ackSender) -> {
//            log.info("Received message: {}", data);
//            socketService.sendMessage(data.getRoom(), "get_message", senderClient, data.getMessage());
//        };
//    }
//
//    private ConnectListener onConnected() {
//        return (client) -> {
//            String room = client.getHandshakeData().getSingleUrlParam("room");
//            if (room != null) {
//                client.joinRoom(room);
//                log.info("Socket ID[{}] Connected to room [{}]", client.getSessionId().toString(), room);
//            }
//        };
//    }
//
//    private DisconnectListener onDisconnected() {
//        return client -> {
//            client.getAllRooms().stream()
//                    .filter(room -> !room.equals(client.getSessionId().toString()))
//                    .forEach(client::leaveRoom);
//
//            log.info("Client[{}] - Disconnected from socket", client.getSessionId());
//        };
//    }
//
//
//
//}